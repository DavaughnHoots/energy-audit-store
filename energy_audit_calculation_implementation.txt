# Energy Audit Calculation Implementation Plan

This document provides a detailed implementation plan for Phase 3 of the Energy Audit Tool implementation, focusing on the Calculation and Recommendation Engine. It connects the existing documentation with the specific implementation details.

**Note**: For a more detailed implementation plan for the calculation functions, see `energy_audit_calculation_detailed_plan.txt`.

## Document Connections

- **Builds on**: energy_audit_data_requirements.txt (defines data fields needed)
- **Extends**: energy_audit_tool_implementation_plan.txt (Phase 3 details)
- **Implements**: Python energy_audit_tool.py functionality in TypeScript

## Phase 3: Calculation and Recommendation Engine

### 1. Port Python Calculation Functions to TypeScript

#### 1.1 Energy Analysis Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_perform_energy_analysis` | `performEnergyAnalysis` in energyAnalysisService.ts | Implemented | Calculates base energy consumption with seasonal and occupancy factors |
| `_calculate_energy_score` | `calculateEnergyScore` in energyAnalysisService.ts | Implemented | Calculates energy efficiency score |

**Implementation Tasks:**
- ✅ Implement `performEnergyAnalysis` to match Python functionality
- ✅ Add proper error handling and validation
- ✅ Add unit tests to verify calculations match Python implementation

#### 1.2 HVAC Analysis Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_perform_hvac_analysis` | `performHvacAnalysis` in hvacAnalysisService.ts | Implemented | Analyzes HVAC system efficiency |
| `_calculate_hvac_energy` | `calculateHvacEnergy` in hvacAnalysisService.ts | Implemented | Calculates HVAC energy consumption |
| `_calculate_heat_transfer` | `calculateHeatTransfer` in hvacAnalysisService.ts | Implemented | Calculates heat transfer through surfaces |
| `_calculate_hvac_score` | `calculateHvacScore` in hvacAnalysisService.ts | Implemented | Calculates HVAC efficiency score |

**Implementation Tasks:**
- ✅ Implement HVAC analysis functions
- ✅ Add heat transfer calculations
- ✅ Add unit tests for HVAC calculations

#### 1.3 Lighting Analysis Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_perform_lighting_analysis` | `performLightingAnalysis` in lightingAnalysisService.ts | Implemented | Analyzes lighting fixtures for efficiency |
| `_calculate_lighting_score` | `calculateLightingScore` in lightingAnalysisService.ts | Implemented | Calculates lighting efficiency score |

**Implementation Tasks:**
- ✅ Implement lighting analysis functions
- ✅ Add fixture-specific calculations
- ✅ Add unit tests for lighting calculations

#### 1.4 Humidity Analysis Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_perform_humidity_analysis` | `performHumidityAnalysis` in humidityAnalysisService.ts | Implemented | Analyzes humidity control needs |
| `_calculate_humidity_score` | `calculateHumidityScore` in humidityAnalysisService.ts | Implemented | Calculates humidity control score |

**Implementation Tasks:**
- ✅ Implement humidity analysis functions
- ✅ Add dehumidification needs calculations
- ✅ Add unit tests for humidity calculations

#### 1.5 Overall Efficiency Score Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_calculate_overall_efficiency_score` | `calculateOverallEfficiencyScore` in efficiencyScoreService.ts | Implemented | Calculates overall building efficiency score |
| `_interpret_efficiency_score` | `interpretEfficiencyScore` in efficiencyScoreService.ts | Implemented | Interprets the efficiency score |

**Implementation Tasks:**
- ✅ Implement overall efficiency score calculation
- ✅ Add weighting factors for different components
- ✅ Add unit tests for overall score calculation

### 2. Implement Product Recommendation Algorithm

#### 2.1 Create ProductRecommendationService

Created a new service in `backend/src/services/productRecommendationService.ts` that implements the functionality of the Python `ProductRecommender` class.

The implementation includes:
- Loading and categorizing products from the database
- Extracting efficiency metrics for each product category
- Recommending products based on user preferences
- Filtering products by features and budget constraints
- Sorting products by efficiency and price
- Calculating potential savings from recommended products
- Generating product recommendations for reports

**Status: Completed**

#### 2.2 Recommendation Generation Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_generate_comprehensive_recommendations` | `generateComprehensiveRecommendations` in recommendationService.ts | Implemented | Generates all recommendations |
| `_generate_energy_recommendations` | `generateEnergyRecommendations` in recommendationService.ts | Implemented | Generates energy-specific recommendations |
| `_generate_hvac_recommendations` | `generateHvacRecommendations` in recommendationService.ts | Implemented | Generates HVAC-specific recommendations |
| `_generate_lighting_recommendations` | `generateLightingRecommendations` in lightingAnalysisService.ts | Implemented | Generates lighting-specific recommendations |
| `_generate_humidity_recommendations` | `generateHumidityRecommendations` in humidityAnalysisService.ts | Implemented | Generates humidity-specific recommendations |
| `_categorize_recommendations` | `categorizeRecommendations` in recommendationService.ts | Implemented | Categorizes recommendations by priority |

**Implementation Tasks:**
- ✅ Implement recommendation generation functions
- ✅ Integrate with ProductRecommendationService
- ✅ Add unit tests for recommendation generation

#### 2.3 Financial Analysis Functions

| Python Function | TypeScript Implementation | Status | Description |
|-----------------|---------------------------|--------|-------------|
| `_perform_financial_analysis` | `performFinancialAnalysis` in financialAnalysisService.ts | Implemented | Calculates financial metrics for recommendations |
| `_analyze_category_financials` | `analyzeCategoryFinancials` in financialAnalysisService.ts | Implemented | Analyzes financials for each category |
| `_calculate_average_payback` | `calculateAveragePayback` in financialAnalysisService.ts | Implemented | Calculates average payback period |
| `_calculate_total_savings` | `calculateTotalSavings` in financialAnalysisService.ts | Implemented | Calculates total savings across all recommendations |

**Implementation Tasks:**
- ✅ Implement financial analysis functions
- ✅ Add ROI calculations
- ✅ Add unit tests for financial calculations

### 3. Update ReportGenerationService

#### 3.1 Add Product Recommendations to Reports

Updated the `ReportGenerationService` in `backend/src/services/ReportGenerationService.ts` to include product recommendations in the generated reports.

The implementation includes:
- Adding a dedicated "Product Recommendations" section to the PDF report
- Retrieving product recommendations based on user preferences
- Displaying top recommended products by category
- Showing efficiency ratings, prices, and features for each product
- Calculating and displaying potential savings for each category
- Showing total estimated annual savings from all recommended products

**Status: Completed**

#### 3.2 Add Visualizations for Product Comparisons

Add visualizations to the reports that compare recommended products based on efficiency, cost, and savings.

**Implementation Tasks:**
- Create visualization functions for product comparisons
- Add charts and graphs to reports
- Add unit tests for visualization generation

## Integration Plan

### 1. Connect Components

1. ✅ Connect ExtendedCalculationService with specialized analysis services
2. ✅ Connect ProductRecommendationService with ReportGenerationService
3. ✅ Connect EnergyAuditService with ProductRecommendationService

### 2. API Updates

1. ✅ Update `/api/energy-audit/:id` endpoint to include product recommendations (Completed)
   - Added product recommendations and savings calculations to the response when product preferences exist
2. ✅ Created new endpoint `/api/recommendations/products?auditId={id}` for product recommendations
   - ✅ Fixed bug: Updated endpoint to query product_preferences column directly
3. ✅ Created new endpoint `/api/recommendations/products/categories` for product categories
4. ✅ Created new endpoint `/api/recommendations/products/features` for product features
5. ✅ Created new endpoint `/api/recommendations/products/category/:category` for category statistics
6. ⬜ Create new endpoints for product comparison feature
   - GET `/api/dashboard/product-history` for retrieving products from past audits
   - POST `/api/comparisons` for saving product comparisons
   - GET `/api/comparisons` for listing saved comparisons
   - GET `/api/comparisons/:id` for retrieving a specific comparison
   - DELETE `/api/comparisons/:id` for deleting a comparison

### 3. Database Integration

1. ✅ Ensured product database is accessible to ProductRecommendationService
2. ✅ Add caching for product recommendations to improve performance (Completed)
3. ✅ Add indexes for efficient product filtering (Completed)
4. ⬜ Create product_comparisons table for storing saved comparisons
   - Added user_id foreign key to link comparisons to users
   - Added JSONB products field to store product data
   - Added indexes for efficient querying

## Testing Strategy

### 1. Unit Tests

1. ✅ Test each calculation function against known inputs and outputs
2. ✅ Test recommendation algorithm with various user preferences
3. ✅ Test financial calculations with different scenarios
4. ⬜ Test product comparison functionality
   - Test getProductHistory function with various user IDs
   - Test saveComparison function with different product sets
   - Test getUserComparisons function for proper retrieval
   - Test deleteComparison function for proper removal

### 2. Integration Tests

1. Test end-to-end flow from audit data to recommendations (Pending)
2. Test report generation with recommendations (Pending)
3. Test API endpoints for recommendations (Pending)
4. Test dashboard integration with product comparison feature (Pending)
   - Test tabbed navigation functionality
   - Test product selection and comparison workflow
   - Test saving and loading comparisons

### 3. Performance Tests

1. Test recommendation algorithm with large product database (Pending)
2. Test report generation with many recommendations (Pending)
3. Test API response times under load (Pending)

## Timeline

- Week 1 (March 6-8): Implement ProductRecommendationService (Completed)
- Week 2 (March 9-13): Port calculation functions (Completed)
- Week 3 (March 14-17): Complete API and Integration (Partially Completed)
- Week 4 (March 18-25): UI for Recommendations (Not Started)
- Week 5 (March 26-31): Implement Product Comparison Feature (Not Started)

## Dependencies

- Product database must be populated with energy-efficient products
- ExtendedCalculationService must be completed
- ReportGenerationService must support adding new sections

## Risks and Mitigations

1. **Risk**: Complex calculations may not translate well from Python to TypeScript
   **Mitigation**: Implement unit tests that compare results with Python implementation

2. **Risk**: Product recommendation algorithm may be slow with large database
   **Mitigation**: Implement caching and pagination for recommendations

3. **Risk**: Report generation with recommendations may be resource-intensive
   **Mitigation**: Generate reports asynchronously and notify users when complete

4. **Risk**: Integration between services may introduce bugs
   **Mitigation**: Implement comprehensive integration tests and error handling

## Modular Architecture

The calculation system has been refactored into a modular architecture with specialized services:

1. **ExtendedCalculationService**: Coordinates the comprehensive analysis by delegating to specialized services
2. **EnergyAnalysisService**: Handles energy consumption analysis
3. **HvacAnalysisService**: Handles HVAC system analysis
4. **LightingAnalysisService**: Handles lighting system analysis
5. **HumidityAnalysisService**: Handles humidity control analysis
6. **EfficiencyScoreService**: Calculates efficiency scores
7. **RecommendationService**: Generates recommendations
8. **FinancialAnalysisService**: Performs financial analysis
9. **ProductRecommendationService**: Handles product recommendations
10. **ProductComparisonService**: Handles product comparison functionality

This modular approach provides several benefits:
- **Improved maintainability**: Each service has a single responsibility
- **Better testability**: Services can be tested in isolation
- **Reduced complexity**: The main service is now much simpler
- **Enhanced extensibility**: New features can be added to specific services without affecting others
